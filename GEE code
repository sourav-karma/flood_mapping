// Filter by district name  
// upload GADM shape file for country Bangladesh
var roi = bd2.filter(ee.Filter.eq('NAME_2', 'Chittagong'))

//add layer for Ctg
Map.addLayer(roi, {}, "Ctg");
Map.centerObject(roi, 9);

// image collection sentinel 1 
var collection = ee.ImageCollection('COPERNICUS/S1_GRD')
        .filterBounds(roi)
        .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
        .filter(ee.Filter.eq('instrumentMode', 'IW'))
        .select('VH')
        //.filter
        //.filter(ee.Filter.or(('orbitProperties_pass', 'DESCENDING'), ee.Filter.eq('orbitProperties_pass', 'ASCENDING')));
        
      
//print(collection)
var after = collection.filterDate('2023-08-05', '2023-08-12').filterBounds(roi);
var before = collection.filterDate('2023-07-10', '2023-07-28').filterBounds(roi);
//print(after)
//print(before)
// clip and mosaic
var after_image = after.select('VH').mosaic().clip(roi)
var before_image = before.select('VH').mosaic().clip(roi)


Map.addLayer(before_image, {min:-25, max:0}, 'Before flood')
Map.addLayer(after_image, {min:-25, max:0}, 'After flood')

//// Refined lee filter


// Create a function to convert from dB to Natural
function toNatural(image){
  return ee.Image(10.0).pow(image.select(0).divide(10.0));
}

// Create a function to convert from Natural to dB
function todB(image){
  return ee.Image(image).log10().multiply(10.0);
}

// Apply a Refined Lee Speckle filter as coded in the SNAP 3.0 S1TBX:
// Adapted by Guido Lemoine

function RefinedLee(image){
  // Image must be in natural units, i.e., not in dB.
  // Set up a 3x3 kernels
  var weights3 = ee.List.repeat(ee.List.repeat({value: 1, count: 3}), 3);
  var kernel3 = ee.Kernel.fixed({width: 3, 
                                height:3, 
                                weights: weights3,
                                x: 1,
                                y: 1, 
                                normalize: false});
  
  var mean3 = image.reduceNeighborhood({reducer: ee.Reducer.mean(),
                                        kernel: kernel3});
  var variance3 = image.reduceNeighborhood({reducer: ee.Reducer.variance(),
                                            kernel: kernel3});     
                                            
  // Use a sample of the 3x3 windows inside a 7x7 window sto determine gradients
  // and directions
  var sample_weights = ee.List([[0, 0, 0, 0, 0, 0, 0], 
                                [0, 1, 0, 1, 0, 1, 0],
                                [0, 0, 0, 0, 0, 0, 0],
                                [0, 1, 0, 1, 0, 1, 0],
                                [0, 0, 0, 0, 0, 0, 0], 
                                [0, 1, 0, 1, 0, 1, 0],
                                [0, 0, 0, 0, 0, 0, 0]]);
                                
  var sample_kernel = ee.Kernel.fixed({width: 7, 
                                      height: 7,
                                      weights: sample_weights, 
                                      x: 3, 
                                      y: 3, 
                                      normalize: false});
  
  // Calculate the mean and variance for the sampled windows and store as 9 bands
  var sample_mean = mean3.neighborhoodToBands(sample_kernel);
  var sample_var = variance3.neighborhoodToBands(sample_kernel);
  
  // Determine the 4 gradients for the sampled windows
  var gradients = sample_mean.select(1).subtract(sample_mean.select(7).abs());
  gradients = gradients.addBands(sample_mean.select(6).subtract(sample_mean.select(2)).abs());
  gradients = gradients.addBands(sample_mean.select(3).subtract(sample_mean.select(5)).abs());
  gradients = gradients.addBands(sample_mean.select(0).subtract(sample_mean.select(8)).abs());
  
  // And find the maximum gradient amongst gradient bands
  var max_gradient = gradients.reduce(ee.Reducer.max());
  
  // Create a mask for band pixels that are the maximum gradient
  var gradmask = gradients.eq(max_gradient);
  
  // Duplicate gradmask bands: each gradient represents 2 directions
  gradmask = gradmask.addBands(gradmask);
  
  // Determine the 8 directions
  var directions = sample_mean.select(1).subtract(sample_mean.select(4)).gt(sample_mean.select(4)
                              .subtract(sample_mean.select(7))).multiply(1);
  directions = directions.addBands(sample_mean.select(6).subtract(sample_mean.select(4))
                        .gt(sample_mean.select(4).subtract(sample_mean.select(2))).multiply(2));
  directions = directions.addBands(sample_mean.select(3).subtract(sample_mean.select(4))
                        .gt(sample_mean.select(4).subtract(sample_mean.select(5))).multiply(3));
  directions = directions.addBands(sample_mean.select(0).subtract(sample_mean.select(4))
                        .gt(sample_mean.select(4).subtract(sample_mean.select(8))).multiply(4));
  
  // The next 4 are the not() of the previous 4
  directions = directions.addBands(directions.select(0).not().multiply(5));
  directions = directions.addBands(directions.select(1).not().multiply(6));
  directions = directions.addBands(directions.select(2).not().multiply(7));
  directions = directions.addBands(directions.select(3).not().multiply(8));
  
  // Mask all values that are not 1-8
  directions = directions.updateMask(gradmask);
  
  // "collapse" the stack into a single band image (due to masking, each pixel has
  // just one value (1-8) in it's directional band, and is otherwise masked)
  directions = directions.reduce(ee.Reducer.sum());
  
  // var pal = ["ffffff", "ff0000", "ffff00", "00ff00", "00ffff", "0000ff", "ff00ff", "000000"];
  // Map.addLayer(directions.reduce(ee.Reducer.sum()), {min: 1, max: 8, palette: pal}, "Directions", false)
  
  var sample_stats = sample_var.divide(sample_mean.multiply(sample_mean));
  
  // Calculate localNoiseVariance
  var sigmaV = sample_stats.toArray().arraySort().arraySlice(0, 0, 5)
                          .arrayReduce(ee.Reducer.mean(), [0]);
                           
  // Set up the 7*7 kernels for directional statistics
  var rect_weights = ee.List.repeat(ee.List.repeat(0, 7), 3)
                      .cat(ee.List.repeat(ee.List.repeat(1, 7), 4));
                       
  var diag_weights = ee.List([[1, 0, 0, 0, 0, 0, 0],
                              [1, 1, 0, 0, 0, 0, 0],
                              [1, 1, 1, 0, 0, 0, 0],
                              [1, 1, 1, 1, 0, 0, 0],
                              [1, 1, 1, 1, 1, 0, 0],
                              [1, 1, 1, 1, 1, 1, 0],
                              [1, 1, 1, 1, 1, 1, 1]]);
                              
  var rect_kernel = ee.Kernel.fixed(7, 7, rect_weights, 3, 3, false);
  var diag_kernel = ee.Kernel.fixed(7, 7, diag_weights, 3, 3, false);
  
  // Create stacks for mean and variance using the original kernels. Mask with 
  // relevant direction.
  var dir_mean = image.reduceNeighborhood(ee.Reducer.mean(), rect_kernel)
                      .updateMask(directions.eq(1));
  var dir_var = image.reduceNeighborhood(ee.Reducer.variance(), rect_kernel)
                    .updateMask(directions.eq(1));
  dir_mean = dir_mean.addBands(image.reduceNeighborhood(ee.Reducer.mean(), diag_kernel)
                      .updateMask(directions.eq(2)));
  dir_var = dir_var.addBands(image.reduceNeighborhood(ee.Reducer.variance(), diag_kernel)
                      .updateMask(directions.eq(2)));
  
  // Add the bands for rotated kernels
  for (var i=1; i<4; i++){
    dir_mean = dir_mean.addBands(image.reduceNeighborhood(ee.Reducer.mean(), rect_kernel.rotate(i))
                      .updateMask(directions.eq(2*i+1)));
    dir_var = dir_var.addBands(image.reduceNeighborhood(ee.Reducer.variance(), rect_kernel.rotate(i))
                      .updateMask(directions.eq(2*i+1)));                       
    dir_mean = dir_mean.addBands(image.reduceNeighborhood(ee.Reducer.mean(), diag_kernel.rotate(i))
                      .updateMask(directions.eq(2*i+2)));                       
    dir_var = dir_var.addBands(image.reduceNeighborhood(ee.Reducer.variance(), diag_kernel.rotate(i))
                      .updateMask(directions.eq(2*i+2)));                            
  }
  
  // "collapse" the stack into a single band image (due to masking, each pixel has just one value in it's directional
  //   band, and is otherwise masked)
  dir_mean = dir_mean.reduce(ee.Reducer.sum());
  dir_var = dir_var.reduce(ee.Reducer.sum());
  
  // A finally generate the filtered value
  var varX = dir_var.subtract(dir_mean.multiply(dir_mean).multiply(sigmaV))
                    .divide(sigmaV.add(1.0));
  var b = varX.divide(dir_var);
  
  var result = dir_mean.add(b.multiply(image.subtract(dir_mean)));
  
  return (result.arrayFlatten([["sum"]]));
}


//// Refined lee filter completed ///// 





// Apply the Speckle filter on the before and after image
var beforeFiltered = ee.Image(todB(RefinedLee(toNatural(before_image.select("VH")))));
var afterFiltered = ee.Image(todB(RefinedLee(toNatural(after_image.select("VH")))));


Map.addLayer(beforeFiltered, {min:-25, max:0}, "Before Flood Speckle Filter");
Map.addLayer(afterFiltered, {min:-25, max:0}, "After Flood Speckle Filter");


var flood = beforeFiltered.gt(-20).and(afterFiltered.lt(-20));
var flood_mask = flood.updateMask(flood.eq(1));

var water = beforeFiltered.lt(-20).and(afterFiltered.lt(-20));
var water_mask = water.updateMask(water.eq(1));


Map.addLayer(flood_mask, { palette: ['Yellow'] }, 'Flood_Inundation');
Map.addLayer(water_mask, { palette: ['Blue'] }, 'Water');



//calculate area of region and flooded area and print it on the screen
// var stats = flood_mask.multiply(ee.Image.pixelArea()).reduceRegion({
//   reducer: ee.Reducer.sum(),
//   geometry: roi,
//   scale: 10,
//   maxPixels: 1e13,
//   tileScale: 16
// });

// var flood_area = ee.Number(stats.get('sum')).divide(10000).round();
// print('Flooded Area (Ha)', flood_area);


//////Apply a different treshold

var difference = afterFiltered.divide(beforeFiltered);

// Define a threshold
var diffThreshold = 1.25;

// Initial estimate of flooded pixels
var flooded = difference.gt(diffThreshold).rename("water").selfMask();
Map.addLayer(flooded, {min:0, max:1, palette: ["orange"]}, "Initial Flood Area", false);


///

var gsw = ee.Image("JRC/GSW1_4/GlobalSurfaceWater")
var srtm = ee.Image("USGS/SRTMGL1_003");

// Mask out area with permanent/semi-permanent water
var permanentWater = gsw.select("seasonality").gte(5).clip(roi);
Map.addLayer(permanentWater.selfMask(), {min:0, max:1, palette: ["blue"]}, "Permanent Water", false);

// GSW data is masked in non-water areas. Set it to 0 using unmask().
// Invert the image to set all non-permanent region to 1
var permanentWaterMask = permanentWater.unmask(0).not();

var flooded = flooded.updateMask(permanentWaterMask);

// Mask out areas with more than 5 degree slope using the SRTM DEM
var slopeThreshold = 5;
var slope = ee.Terrain.slope(srtm.clip(roi));
var steepAreas = slope.gt(slopeThreshold);
var slopeMask = steepAreas.not();
Map.addLayer(slope, {min:0, max:1, palette:["cyan"]}, "Steep Areas", false);

var flooded = flooded.updateMask(slopeMask);


////Remove Isolated Pixels:
var connectedPixelThreshold = 20;
var connections = flooded.connectedPixelCount(25);
var disconnectedAreas = connections.lt(connectedPixelThreshold);
var disconnectedAreaMask = disconnectedAreas.not();
Map.addLayer(disconnectedAreas.selfMask(), {min:0, max:1, palette: ["yellow"]}, "Disconnected Areas", false);

var flooded = flooded.updateMask(disconnectedAreaMask);
Map.addLayer(flooded, {min:0, max:1, palette: ["red"]}, "Flooded Areas");


// Export to Google Drive
Export.image.toDrive({
  image: before_image,
  description: 'Before_Flood_Raw',
  folder: 'GEE',
  scale: 10,
  region: roi,
  maxPixels: 1e13
});

Export.image.toDrive({
  image: after_image,
  description: 'After_Flood_Raw',
  folder: 'GEE',
  scale: 10,
  region: roi,
  maxPixels: 1e13
});

Export.image.toDrive({
  image: beforeFiltered,
  description: 'Before_Flood_Filtered',
  folder: 'GEE',
  scale: 10,
  region: roi,
  maxPixels: 1e13
});

Export.image.toDrive({
  image: afterFiltered,
  description: 'After_Flood_Filtered',
  folder: 'GEE',
  scale: 10,
  region: roi,
  maxPixels: 1e13
});

Export.image.toDrive({
  image: flooded,
  description: 'Flooded areas',
  folder: 'GEE',
  scale: 10,
  region: roi,
  maxPixels: 1e13
});


Export.image.toDrive({
  image: permanentWater,
  description: 'permanentWater',
  folder: 'GEE',
  scale: 10,
  region: roi,
  maxPixels: 1e13
});
